/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/modules/helper-functions.js":
/*!*****************************************!*\
  !*** ./src/modules/helper-functions.js ***!
  \*****************************************/
/***/ ((module) => {

function getValue(id) {
  return document.getElementById(id).value;
}

function setValue(id, value) {
  document.getElementById(id).value = value;
}

function getInnerText(id) {
  return document.getElementById(id).innerText;
}

function setInnerText(id, text) {
  document.getElementById(id).innerText = text;
}

module.exports = {
  'getValue': getValue,
  'setValue': setValue,
  'getInnerText': getInnerText,
  'setInnerText': setInnerText
};

/***/ }),

/***/ "./src/modules/storage.js":
/*!********************************!*\
  !*** ./src/modules/storage.js ***!
  \********************************/
/***/ ((module) => {

var TODOList = 'TODO-List';

function start() {
  //set an empty map if not-existent
  if (localStorage.getItem(TODOList) == null) {
    var todoMap = JSON.stringify({});
    localStorage.setItem(TODOList, todoMap);
  }
}

function setItemToLocalstorage(id, title, content) {
  start();
  var item = {
    "title": title,
    "content": content
  };
  var todoListString = localStorage.getItem(TODOList);
  var todoMap = JSON.parse(todoListString); //inset item to todo map

  todoMap[id] = item;
  localStorage.setItem(TODOList, JSON.stringify(todoMap));
}

function removeItemFromLocalstorage(id) {
  start();
  var todoListString = localStorage.getItem(TODOList);
  var todoMap = JSON.parse(todoListString); //delete item to todo map

  delete todoMap[id];
  localStorage.setItem(TODOList, JSON.stringify(todoMap));
}

function getAllItemsFromStorage() {
  start();
  return JSON.parse(localStorage.getItem(TODOList));
}

function getItemFromLocalstorage(id) {
  start();
  var todoListString = localStorage.getItem(TODOList);
  var todoMap = JSON.parse(todoListString);
  return todoMap[key];
}

function clearItemsFromItemList() {
  localStorage.setItem(TODOList, {});
}

function clearTODOListFromStorage() {
  localStorage.removeItem(TODOList);
}

module.exports = {
  'set': setItemToLocalstorage,
  'get': getItemFromLocalstorage,
  'getAll': getAllItemsFromStorage,
  'remove': removeItemFromLocalstorage,
  'clear': clearItemsFromItemList,
  'clearStorage': clearTODOListFromStorage
};

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
var storage = __webpack_require__(/*! ./modules/storage.js */ "./src/modules/storage.js");

var _require = __webpack_require__(/*! ./modules/helper-functions.js */ "./src/modules/helper-functions.js"),
    getValue = _require.getValue,
    setValue = _require.setValue,
    getInnerText = _require.getInnerText,
    setInnerText = _require.setInnerText;

var editedID = 0;
var editMode = false;

function getNewID() {
  return new Date().getTime().toString();
}

function addItem() {
  var title = getValue('title-input');

  if (title == '') {
    alert('cant add an item without a title');
    return;
  }

  if (editMode) {
    alert('cant add an item while in edit mode');
    return;
  }

  var content = getValue('content-input');
  var list = document.getElementById('list');
  var id = getNewID();
  storage.set(id, title, content);
  var itemElement = createTodoItemElement(id, title, content);
  list.appendChild(itemElement); // reset menu display

  clearMenu();
  setInnerText('apply-button', 'Add');
}

function deleteCheckedItems() {
  var itemList = storage.getAll();
  var list = document.getElementById('list');

  for (var id in itemList) {
    var checkbox = document.getElementById("item-checkbox".concat(id));

    if (checkbox.checked) {
      console.log(id, 'is checked');
      var itemElement = document.getElementById("".concat(id));
      list.removeChild(itemElement);
      storage.remove(id);
    }
  }
}

function cancelEdit() {
  clearMenu();
  editMode = false;
  setInnerText('apply-button', 'Add');
  document.getElementById('cancel-button').hidden = true;
  editedID = 0;
}

function clearMenu() {
  setValue('title-input', '');
  setValue('content-input', '');
}

function menuButtonClick() {
  if (!editMode) {
    // adding a new item
    addItem();
  } else {
    // editing an existing item
    if (getValue('title-input') == '') {
      alert('cant set an empty title');
      return;
    }

    var title = getValue('title-input');
    var content = getValue('content-input');
    setInnerText("title".concat(editedID), title);
    setInnerText("content".concat(editedID), content);
    storage.set(editedID, title, content);
    clearMenu();
    editMode = false;
    setInnerText('apply-button', 'Add');
    document.getElementById('cancel-button').hidden = true;
    editedID = 0;
  }
}

function addButton() {
  clearMenu();
  document.getElementById('title-input').focus();
}

function createTodoItemElement(itemID, title, content) {
  // ol todo-item
  var itemElement = document.createElement('ol');
  itemElement.className = 'todo-item';
  itemElement.id = itemID; // input checkbox

  var itemCheckboxElement = document.createElement('input');
  itemCheckboxElement.type = 'checkbox';
  itemCheckboxElement.className = 'item-checkbox';
  itemCheckboxElement.id = "item-checkbox".concat(itemID); // div todo-item-text

  var itemTextElement = createItemTextElement(itemID, title, content);
  var itemButtonsElement = createItemButtonsElement(itemID); // append checkbox, text and buttons to list-item

  itemElement.appendChild(itemCheckboxElement);
  itemElement.appendChild(itemTextElement);
  itemElement.appendChild(itemButtonsElement);
  return itemElement;
}

function createItemButtonsElement(itemID) {
  var itemButtonsElement = document.createElement('div');
  itemButtonsElement.className = 'todo-item-buttons'; // button edit

  var editButtonElement = document.createElement('button');
  editButtonElement.innerText = 'edit';
  editButtonElement.className = 'item-edit-button';

  editButtonElement.onclick = function () {
    // set menu to editing state
    editMode = true;
    editedID = itemID;
    document.getElementById('cancel-button').hidden = false;
    setInnerText('apply-button', 'Apply');
    var title = getInnerText("title".concat(itemID));
    var content = getInnerText("content".concat(itemID));
    setValue('title-input', title);
    setValue('content-input', content);
  }; // button delete


  var deleteButtonElement = document.createElement('button');
  deleteButtonElement.innerText = 'delete';
  deleteButtonElement.className = 'item-delete-button';

  deleteButtonElement.onclick = function () {
    if (editMode) {
      alert('cant delete while in edit mode');
      return;
    }

    var item = document.getElementById(itemID);
    var list = document.getElementById('list'); // remove from display

    list.removeChild(item); // remove from item storage

    storage.remove(itemID);
  }; // append the buttons to container


  itemButtonsElement.appendChild(editButtonElement);
  itemButtonsElement.appendChild(deleteButtonElement);
  return itemButtonsElement;
}

function createItemTextElement(itemID, title, content) {
  var itemTextElement = document.createElement('div');
  itemTextElement.className = 'todo-item-text'; // item title

  var titleElement = document.createElement('div');
  titleElement.innerText = title;
  titleElement.className = 'todo-item-title';
  titleElement.id = 'title' + itemID; // item content

  var contentElement = document.createElement('div');
  contentElement.innerText = content;
  contentElement.className = 'todo-item-content';
  contentElement.id = 'content' + itemID; // append text to parent container 

  itemTextElement.appendChild(titleElement);
  itemTextElement.appendChild(contentElement);
  return itemTextElement;
}

function showItemsFromLocalStorage() {
  var todoMap = storage.getAll();
  var list = document.getElementById('list');

  for (var key in todoMap) {
    var item = todoMap[key];
    var title = item['title'];
    var content = item['content'];
    var itemElement = createTodoItemElement(key, title, content);
    list.appendChild(itemElement);
  }
}

window.onload = function () {
  // attach functions to menu buttons
  document.getElementById('menu').addEventListener('keyup', function (event) {
    if (event.keyCode === 13) {
      document.getElementById('apply-button').click();
      document.getElementById('title-input').focus();
    }
  });
  document.getElementById('clear-button').onclick = clearMenu;
  document.getElementById('apply-button').onclick = menuButtonClick;
  document.getElementById('cancel-button').onclick = cancelEdit;
  document.getElementById('add-button').onclick = addButton;
  document.getElementById('clean-button').onclick = deleteCheckedItems;
  showItemsFromLocalStorage();
};
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,